[USER-DEFINED]
NTNX_ACCESS = need_to_be_configured_by_user
NTNX_CREDENTIALS = need_to_be_configured_by_user
NTNX_KEY_NAME = need_to_be_configured_by_user
NTNX_SECURITY_GROUPS = need_to_be_configured_by_user
NTNX_INITIAL_VMCS = need_to_be_configured_by_user
NTNX_SSH_KEY_NAME = need_to_be_configured_by_user
NTNX_LOGIN = need_to_be_configured_by_user
NTNX_NETNAME = need_to_be_configured_by_user

# PEBCAK documentation for the Wizard and CLI
NTNX_ACCESS_DOC = Please enter the HTTP address of the API\nused for access to interact with the cloud.\nThis is usually in the form of http://<address>:9440/v2.0/
NTNX_ACCESS_DEFAULT = http://<address>:9440/v2.0/
NTNX_CREDENTIALS_DOC = This option requires a specific syntax:\n<username>-<password>-<tenant>\n ... Please enter these parameters as you\nwould use them to login to the Nutanix\nuser interface.
NTNX_CREDENTIALS_DEFAULT = admin-password-admin
NTNX_KEY_NAME_DOC = Please enter the Nutanix key used to login\nto your VMs as root. This key needs to be generated in\nthe Nutanix user interface before starting the tool.
NTNX_KEY_NAME_DEFAULT = some_key_name 
NTNX_SECURITY_GROUPS_DOC = Please enter the security group used in\nyour Nutanix vms. This group needs to be created\nin the Nutanix user interface before\nstarting the tool.
NTNX_SECURITY_GROUPS_DEFAULT = default 
NTNX_LOGIN_DOC = $LOGIN_DOC
NTNX_LOGIN_DEFAULT = some_login_name
NTNX_SSH_KEY_NAME_DOC = $SSH_KEY_NAME_DOC
NTNX_SSH_KEY_NAME_DEFAULT = id_rsa.private
NTNX_INITIAL_VMCS_DOC = $INITIAL_VMCS_DOC 
NTNX_INITIAL_VMCS_DEFAULT = RegionOne
NTNX_NETNAME_DOC = "Please enter the name of the network that will connect all created VMs"
NTNX_NETNAME_DEFAULT = private

[SPACE : NTNX_CLOUDCONFIG ]
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME

[MON_DEFAULTS : NTNX_CLOUDCONFIG ]
COLLECT_FROM_HOST = $False # requires ganglia installation on hypervisor
COLLECT_FROM_GUEST = $False

[VMC_DEFAULTS : NTNX_CLOUDCONFIG]
ACCESS = $NTNX_ACCESS
CREDENTIALS = $NTNX_CREDENTIALS
SECURITY_GROUPS = $NTNX_SECURITY_GROUPS
KEY_NAME = $NTNX_KEY_NAME
INITIAL_VMCS = $NTNX_INITIAL_VMCS
ADDITIONAL_DISCOVERY = $Empty
MODIFY_HOST_NAMES = $False
MIGRATE_SUPPORTED = $False
PROTECT_SUPPORTED = $False
HOST_USER_ROOT = $False
ALL_TENANTS = 0

[VM_DEFAULTS : NTNX_CLOUDCONFIG]
ACCESS = $NTNX_ACCESS
CREDENTIALS = $NTNX_CREDENTIALS
KEY_NAME = $NTNX_KEY_NAME
SECURITY_GROUPS = $NTNX_SECURITY_GROUPS
CLOUD_MAC = $True
CAPTURE_SUPPORTED = $False
RUNSTATE_SUPPORTED = $False
RESIZE_SUPPORTED = $False
LOGIN = $NTNX_LOGIN
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME
CHECK_BOOT_STARTED = poll_cloud
# Other methods could be used to check if a VM *STARTED* booting
#CHECK_BOOT_STARTED = subscribe_on_starting
CHECK_BOOT_COMPLETE = tcp_on_22
# Other methods could be used to check if a VM *FINISHED* booting
#CHECK_BOOT_COMPLETE = subscribe_on_booting
#CHECK_BOOT_COMPLETE = wait_for_0
NETNAME = $NTNX_NETNAME
TENANT = default
PROJECT = default
JUMPHOST_ROLE = tinyvm
JUMPHOST_SIZE = m1.tiny
SIZE = from_vm_template
CREATE_LB = $false
CGROUPS_BASE_DIR = /sys/fs/cgroup/
HOSTNAME_KEY = cloud_vm_name
FLOATING_POOL = $Empty
ALWAYS_CREATE_FLOATING_IP = $True
LEAVE_INSTANCE_ON_FAILURE = $False
FORCE_FAILURE = $False
DISABLE_TIMESYNC = $False
USERDATA = $True
USERDATA_SSH = $True
AVAILABILITY_ZONE = $Empty
BOOT_VOLUME_IMAGEID1_INSTANCE = None
FLAVOR_INSTANCE = None
IMAGE_PREFIX = $EMPTY
IMAGE_SUFFIX = $EMPTY
ALL_TENANTS = 0

[AI_DEFAULTS : NTNX_CLOUDCONFIG]
ATTACH_PARALLELISM = 10
CAPTURE_SUPPORTED = $False
RUNSTATE_SUPPORTED = $False
RESIZE_SUPPORTED = $False
LOGIN = $NTNX_LOGIN
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME
CREDENTIALS = $NTNX_CREDENTIALS
KEY_NAME = $NTNX_KEY_NAME
NETNAME = $NTNX_NETNAME
TENANT = default
PROJECT = default
FLOATING_POOL = $Empty
CREATE_LB = $false
ALWAYS_CREATE_FLOATING_IP = $True
DONT_START_QEMU_SCRAPER = $True

[AIDRS_DEFAULTS : NTNX_CLOUDCONFIG]
LOGIN = $NTNX_LOGIN
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME

[VMCRS_DEFAULTS : NTNX_CLOUDCONFIG]
LOGIN = $NTNX_LOGIN
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME

[FIRS_DEFAULTS : NTNX_CLOUDCONFIG]
LOGIN = $NTNX_LOGIN
SSH_KEY_NAME = $NTNX_SSH_KEY_NAME

[VM_TEMPLATES : NTNX_CLOUDCONFIG]
NEST_CONTAINERS_BASE_IMAGE = size:NA, imageids:1, imageid1:bionic-server-cloudimg-amd64, cloudinit_packages:openvpn;bc;jq;docker.io;python;redis-server


